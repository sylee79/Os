<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('User', 'mogicard');

/**
 * BaseUser
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $added_on
 * @property integer $updated_on
 * @property string $mobile_number
 * @property string $password
 * @property string $first_name
 * @property string $last_name
 * @property date $date_of_birth
 * @property integer $gender
 * @property string $email_address
 * @property integer $is_confirmed
 * @property integer $is_suspended
 * @property string $suspension_reason
 * @property integer $setting_promo_max
 * @property integer $setting_promo_frequency
 * @property integer $setting_promo_mode
 * @property integer $setting_share_loc
 * @property integer $setting_activity_sharing_enabled
 * @property float $stat_last_loc_lat
 * @property float $stat_last_loc_long
 * @property integer $stat_last_loc_ts
 * @property integer $stat_last_merchant_id
 * @property integer $stat_last_merchant_outlet_id
 * @property string $setting_shopping_district_list
 * @property string $setting_fav_product_list
 * @property string $setting_promo_merchant_list
 * @property string $profile_picture_fsref
 * @property Merchant $Merchant
 * @property MerchantOutlet $MerchantOutlet
 * @property Doctrine_Collection $PhotoGallery
 * @property Doctrine_Collection $PinBox
 * @property Doctrine_Collection $SessionBox
 * @property Doctrine_Collection $UserFriend
 * @property Doctrine_Collection $UserFriend_2
 * @property Doctrine_Collection $UserInbox
 * @property Doctrine_Collection $UserInbox_3
 * @property Doctrine_Collection $UserOccasion
 * @property Doctrine_Collection $UserOutgoingInvitation
 * @property Doctrine_Collection $UserSocialAction
 * @property Doctrine_Collection $UserSocialAction_5
 * @property Doctrine_Collection $UserTransaction
 * @property Doctrine_Collection $UserWalletItem
 * @property Doctrine_Collection $UserWishlist
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseUser extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('user');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('added_on', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('updated_on', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('mobile_number', 'string', 50, array(
             'type' => 'string',
             'length' => 50,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('password', 'string', 50, array(
             'type' => 'string',
             'length' => 50,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('first_name', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('last_name', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('date_of_birth', 'date', null, array(
             'type' => 'date',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('gender', 'integer', 1, array(
             'type' => 'integer',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('email_address', 'string', 1024, array(
             'type' => 'string',
             'length' => 1024,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('is_confirmed', 'integer', 1, array(
             'type' => 'integer',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('is_suspended', 'integer', 1, array(
             'type' => 'integer',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('suspension_reason', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('setting_promo_max', 'integer', 1, array(
             'type' => 'integer',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('setting_promo_frequency', 'integer', 1, array(
             'type' => 'integer',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('setting_promo_mode', 'integer', 1, array(
             'type' => 'integer',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('setting_share_loc', 'integer', 1, array(
             'type' => 'integer',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('setting_activity_sharing_enabled', 'integer', 1, array(
             'type' => 'integer',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('stat_last_loc_lat', 'float', 10, array(
             'type' => 'float',
             'length' => 10,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('stat_last_loc_long', 'float', 10, array(
             'type' => 'float',
             'length' => 10,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('stat_last_loc_ts', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('stat_last_merchant_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('stat_last_merchant_outlet_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('setting_shopping_district_list', 'string', null, array(
             'type' => 'string',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('setting_fav_product_list', 'string', null, array(
             'type' => 'string',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('setting_promo_merchant_list', 'string', null, array(
             'type' => 'string',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('profile_picture_fsref', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Merchant', array(
             'local' => 'stat_last_merchant_id',
             'foreign' => 'id'));

        $this->hasOne('MerchantOutlet', array(
             'local' => 'stat_last_merchant_outlet_id',
             'foreign' => 'id'));

        $this->hasMany('PhotoGallery', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('PinBox', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('SessionBox', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('UserFriend', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('UserFriend as UserFriend_2', array(
             'local' => 'id',
             'foreign' => 'friend_user_id'));

        $this->hasMany('UserInbox', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('UserInbox as UserInbox_3', array(
             'local' => 'id',
             'foreign' => 'sender_user_id'));

        $this->hasMany('UserOccasion', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('UserOutgoingInvitation', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('UserSocialAction', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('UserSocialAction as UserSocialAction_5', array(
             'local' => 'id',
             'foreign' => 'b_user_id'));

        $this->hasMany('UserTransaction', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('UserWalletItem', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('UserWishlist', array(
             'local' => 'id',
             'foreign' => 'user_id'));
    }
}